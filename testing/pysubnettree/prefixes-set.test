# Test that lookups match the correct entry.
#
# @TEST-EXEC: python %INPUT

from testsetup import testcase, ipv4binary, ipv6binary
import SubnetTree

t = SubnetTree.SubnetTree()

p = t.prefixes()
testcase(not len(p), "empty tree is empty prefix set")

t.insert("::ffff:0:0/96", "IPv4-mapped addrs")
t.insert("1:2:3:4::/64", "IPv6 /64")
t["10.1.0.0/16"] = "IPv4 /16"
t["10.1.42.0/24"] = "IPv4 /24"
t['2620:4d:4004:3::2/64'] = "IPv6 /64 2"
t['189.247.142.246/24'] = "IPv4 /24 2"

expected = set(['::ffff:10.1.0.0', '::ffff:189.247.142.246', '2620:4d:4004:3::2', '::ffff:0.0.0.0', '::ffff:10.1.42.0', '1:2:3:4::'])
testcase(not (t.prefixes() - expected), "prefixes all IPv6 no len")

expected = set(['2620:4d:4004:3::2/64', '::ffff:189.247.142.246/120', '::ffff:10.1.0.0/112', '1:2:3:4::/64', '::ffff:10.1.42.0/120', '::ffff:0.0.0.0/96'])
testcase(not (t.prefixes(with_len=True) - expected), "prefixes all IPv6 with len")

expected = set(['2620:4d:4004:3::2', '189.247.142.246', '10.1.42.0', '10.1.0.0', '0.0.0.0', '1:2:3:4::'])
testcase(not (t.prefixes(ipv4_native=True) - expected), "prefixes IPv4 native")

expected = set(['2620:4d:4004:3::2/64', '10.1.0.0/16', '10.1.42.0/24', '1:2:3:4::/64', '189.247.142.246/24', '0.0.0.0/0'])
testcase(not (t.prefixes(ipv4_native=True, with_len=True) - expected), "prefixes IPv4 native with len")

